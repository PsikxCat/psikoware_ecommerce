datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type OrderProductType {
  id String
  unitPrice Float
  name String
  category String
  // inStock Int
  quantity Int
  // brand String
  // color String
  // colorCode String
  // capacity String?
  selectedImg String
}

type Address {
  name String
  addressLine1 String
  addressLine2 String?
  city String
  country String
  postalCode String
} // ! Pendiente de contrastar con la data recibida de MP

type Description {
  title String
  content String
}

type Specification {
  group String
  content SpecificationGroup[]
}

type SpecificationGroup {
  title String
  content String
}

model User {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?  @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            Role @default(USER)

  orders Order[]
  reviews Review[]
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  brand String
  category String
  shortDescription String
  description Description[]
  specifications Specification[]
  productVariants ProductVariant[]
  reviews Review[]
}

model ProductVariant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  price Float
  quantity Int?
  inStock Int
  color String
  colorCode String
  capacity String?
  images String[]

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  productId String @db.ObjectId
  rating Int
  comment String
  createDateTime DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  amount Float
  currency String
  status String
  deliveryStatus String
  createDateTime DateTime @default(now())
  paymentId String @unique
  products OrderProductType[]
  address Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

// # recordar ---> npx prisma db push para crear las tablas en la base de datos
